import json
import os
import re


def parse_and_replace(file_path, replacement_map):
    placeholder_pattern = r"%(\d+)%"

    with open(file_path, 'r') as file:
        content = file.read()

    def replacer(match):
        number = match.group(1)
        return replacement_map.get(int(number), match.group(0))

    updated_content = re.sub(placeholder_pattern, replacer, content)

    return updated_content


def write_to_file(file_path, content):
    try:
        with open(file_path, 'w') as file:
            file.write(content)
    except Exception as e:
        raise Exception(f"error writing to file: '{e}'")


def parse_json_file(file_path):
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)
            return data
    except FileNotFoundError:
        raise FileNotFoundError(f"'{file_path}' does not exist")
    except json.JSONDecodeError:
        raise json.JSONDecodeError(f"'{file_path}' is an invalid json")
    except Exception as e:
        raise Exception(f"unexpected error during json parsing: '{e}'")


# prep and config
home = os.path.expanduser("~")

#hl_path = f"{home}/.config/hypr/colors.conf"

#hlock_path_template = f"{home}/.config/hypr/hyprlock-template.conf"
#hlock_path_final = f"{home}/.config/hypr/hyprlock.conf"

#ss_path_template = f"{home}/.config/starship-template.toml"
#ss_path_final = f"{home}/.config/starship.toml"

mk_path_template = f"{home}/.config/mako/config-template"
mk_path_final = f"{home}/.config/mako/config"

#cv_path_template = f"{home}/.config/cava/config-template"
#cv_path_final = f"{home}/.config/cava/config"

print(f"home: '{home}'")
colors = parse_json_file(f"{home}/.cache/wal/colors.json")["colors"]

global_border = colors["color11"]
global_bg = colors["color0"]
global_font = colors["color7"]

"""
# -----
# hyprland border colors (fullauto)
hl_template = "# this file was autogenerated\ngeneral {"

# active border
hl_a_color = global_border[1:].lower() + "bf"
# inactive border
hl_in_color1 = colors["color7"][1:].lower() + "ff"
hl_in_color2 = colors["color8"][1:].lower() + "ff"
# no group active
hl_nga_color = colors["color7"][1:].lower() + "80"
# no group inactive
hl_ng_color = colors["color8"][1:].lower() + "80"

active = f"\tcol.active_border = rgba({hl_a_color})"
inactive = (
    "\tcol.inactive_border = "
    f"rgba({hl_in_color1}) rgba({hl_in_color2}) 135deg"
)
nogroup_active = f"\tcol.nogroup_border_active = rgba({hl_nga_color})"
nogroup = f"\tcol.nogroup_border = rgba({hl_ng_color})"

hl_final = (
    f"{hl_template}\n{active}\n{inactive}\n{nogroup_active}\n{nogroup}\n}}"
)

print(f"\nhyprland color file:\n----->\n{hl_final}\n----->")
write_to_file(hl_path, hl_final)
"""
"""
# -----
# hyprlock config (parsed)
hlock_background_color = global_bg[1:].lower() + "bf"
hlock_border_color = global_border[1:].lower() + "ff"
hlock_font_color = global_font[1:].lower() + "ff"
hlock_check_color = colors["color12"][1:].lower() + "ff"

hlock_replacements = {
    1: hlock_background_color,
    2: hlock_border_color,
    3: hlock_font_color,
    4: hlock_check_color
}

hlock_final_nowarning = parse_and_replace(
    hlock_path_template,
    hlock_replacements
)
hlock_final = (
    f"# this file was partially autogenerated\n{hlock_final_nowarning}"
)

print(f"\nhyprlock config file:\n----->\n{hlock_final}\n----->")
write_to_file(hlock_path_final, hlock_final)
"""
"""
# -----
# starship config (parsed)
ss_gradient1 = colors["color2"].upper()
ss_gradient2 = colors["color4"].upper()
ss_gradient3 = colors["color6"].upper()
replacements = {
    1: ss_gradient1,
    2: ss_gradient2,
    3: ss_gradient3
}

ss_final_nowarning = parse_and_replace(ss_path_template, replacements)
ss_final = f"# this file was partially autogenerated\n{ss_final_nowarning}"

print(f"\nstarship config file:\n----->\n{ss_final}\n----->")
write_to_file(ss_path_final, ss_final)
"""

# -----
# mako config
mk_border = global_border.lower()
mk_background = global_bg.lower()
replacements = {
        1: mk_background,
        2: mk_border
}

mk_final_nowarning = parse_and_replace(mk_path_template, replacements)
mk_final = f"# this file was partially autogenerated\n{mk_final_nowarning}"

print(f"\nmako config file:\n----->\n{mk_final}\n----->")
write_to_file(mk_path_final, mk_final)

"""
# -----
# cava config (parsed)
cv_gradient1 = colors["color1"].lower()
cv_gradient2 = colors["color2"].lower()
cv_gradient3 = colors["color3"].lower()
cv_gradient4 = colors["color4"].lower()
cv_gradient5 = colors["color5"].lower()
cv_gradient6 = colors["color6"].lower()

replacements = {
        1: cv_gradient1,
        2: cv_gradient2,
        3: cv_gradient3,
        4: cv_gradient4,
        5: cv_gradient5,
        6: cv_gradient6
}

cv_final_nowarning = parse_and_replace(cv_path_template, replacements)
cv_final = f"# this file was partially autogenerated\n{cv_final_nowarning}"

print(f"\ncava config file:\n----->\n{cv_final}\n----->")
write_to_file(cv_path_final, cv_final)
"""
